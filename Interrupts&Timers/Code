// Global variables
const int soilPin = 10;
const int motionPin1 = 8;
const int motionPin2 = 9;

int timer1_compare_match;

// setup function which runs only once
void setup()
{
  //braud rate for serial communication
  Serial.begin(9600);
  // setting pin modes as output & input
  pinMode(7, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(13, OUTPUT);
  pinMode(motionPin1, INPUT);
  pinMode(motionPin2, INPUT);
  pinMode(soilPin, INPUT);
  noInterrupts();

  // Initialize Timer1
  TCCR1A = 0;
  TCCR1B = 0;
 
  // Set timer1_compare_match to the correct compare match register value
  // Setting the value of timer compare register according to the formula - [Clock / (Prescaler * desirable freq)] - 1
  timer1_compare_match = 31249;
 
  // Preloading the timer with the register
  TCNT1 = timer1_compare_match;
 
  // Set prescaler to 256
  TCCR1B |= (1 << CS12);
 
  // Setting timer interrupt for compare mode
  TIMSK1 |= (1 << OCIE1A);
 
  // Enable all interrupts
  interrupts();
  
  // adding a interrupt for motion sensor
  // Specifying which Port to be used - Port B
  PCICR |= B00000001;
  // Specifying which Pin to be used - Pin 8
  PCMSK0 |= B00000111;
}

// loop will run continously
void loop()
{ 
  delay(1000);
}

// interrupt function which is called whenever interrupted
// It doesn't interfare the loop function
// It is a C method which directly tells the compiler for Interrupt control
// Interrupt service routine
ISR(PCINT0_vect) {
  if (digitalRead(motionPin1) == HIGH) {
    digitalWrite(5, HIGH); 
    Serial.println("Motion Detected!");
  }
  else if (digitalRead(motionPin2) == HIGH) {
    digitalWrite(6, HIGH); 
    Serial.println("Motion Detected!");
  }
  else if (digitalRead(soilPin) == HIGH) {
    digitalWrite(7, HIGH); 
    Serial.println("Soil Alert!");
  }
  else {
    digitalWrite(7, LOW);
    digitalWrite(6, LOW);
    digitalWrite(5, LOW);
  }
  
}
ISR(TIMER1_COMPA_vect)
// Interrupt Service Routine for compare mode
{
  // Preload timer with compare match value
  TCNT1 = timer1_compare_match;
  
  // Write opposite value to LED
  digitalWrite(13, digitalRead(13) ^ 1);
}
